/*
 * stm32f4xx_spi_driver.c
 *
 *  Created on: 1 Sep 2020
 *      Author: templ
 */
#include "stm32f446xx.h"
#include "stm32f4xx_spi_driver.h"



/***************** SPI Clock Setup*********************/

/****************************************************************
*@fn                 -GPIO_PeriClockControl
*
*@brief              -This function enables or disables SPI clock
*
*@Param[in]          -base address of GPIO  Peripheral
*@Param[in]          -ENABLE or DISABLE macros
*@Param[in]          -
*
*@Return             -
*
*@Notes              -
*
*
*/
void SPI_PeriClockControl (SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
      if(EnorDi == ENABLE)
      {
         if(pSPIx == SPI1)
         {
        	 SPI1_PCLK_EN();

         }else if(pSPIx == SPI2 )
         {
             SPI2_PCLK_EN();
         }else if(pSPIx == SPI3 )
         {
             SPI3_PCLK_EN();
         }else if(pSPIx == SPI4 )
         {
             SPI4_PCLK_EN();
         }
      }else
      {
	      //TODO
      }
}


/****************Init and DeInit************/

/****************************************************************
*@fn                 - SPI_Init and SPI_DeInit
*
*@brief              - the functions initilize and deinitilize the SPI peripheral
*
*@Param[in]          - SPI Handle Structure
*
*@Return             - none
*
*@Notes              - none
*
*/


void SPI_Init(SPI_Handle_t *pSPIHandle)
{

	uint32_t tempreg  = 0;
	//Configure SPI control register 1

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	// 1. configure the device mode

	 tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2 ;

	 // 2.configure the
	  if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	  {
		  //BIDIMODE should be cleared
		  tempreg &= ~(1 << 15);

	  }else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	    {
		  //BIDIMODE should be set
		  tempreg |= (1 << 15);

	    }else if (pSPIHandle->SPIConfig.SPI_BusConfig ==SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	    {
	    	//BIDIMODE should be cleared
	    	tempreg &= ~(1 << 15);
	    	//RX Only Mode should be set
	    	tempreg |= (1 << 10);
	    }


	  //3. configure the SPI serial clock speed (baud rate)
	    tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;

	  //4.configure the DFF
	    tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;

	  //5.configure the CPOL
	    tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL ;

	  //6.configure the CPHA
	    tempreg |= ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA );

}



void SPI_DeInit(SPI_RegDef_t *pSPIx )
{
    if(pSPIx == SPI1)
    {
    	SPI1_REG_RESET();
    }else if(pSPIx == SPI2)
    {
    	SPI2_REG_RESET();
    }else if(pSPIx == SPI3)
    {
    	SPI3_REG_RESET();
    }else if(pSPIx == SPI4)
    {
    	SPI4_REG_RESET();
    }

}


uint8_t SPI_GetStatusFlag(SPI_RegDef_t *pSPIx, uint32_t FlagName )
{

      if(pSPIx->SPI_SR & FlagName)
      {

    	  return FLAG_SET;

      }
	    return FLAG_RESET;
}

    /****************Init and DeInit************/

    /****************************************************************
    *@fn                 - SPI_Init and SPI_DeInit
    *
    *@brief              - the functions initilize and deinitilize the SPI peripheral
    *
    *@Param[in]          - SPI peripheral base address
    *@Param[in]          - pTxBuffer for data transfer
    *@Param[in]          - Data Length for Len
    *
    *@Return             - none
    *
    *@Notes              - This is a Blocking call cause of while loops
    *@Notes              - interrupt based codes would not block
    *@Notes              - also this code called polling based API Function
    *
    */

 void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
 {
     while(Len > 0)
	 {
		 // 1.wait until TXE is set
	        //  while( pSPIx->SPI_SR & (1 << 1));  alternative way of to check if TXE is set
	    while(SPI_GetStatusFlag(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
	    // HERE WE ARE POLLÄ°NG FOR THE TXE FLAG TO SET
	    // This function might end up blocking permanetly due to some SPI communucation error
	    // Therefore you need a watchdog set up  in order to restart your program

        //2. check the DFF bit in CR1

	    if(pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF))
	    {

	    	//16 bit data format
	    	// 1. load the data into the DR
	    	pSPIx->SPI_DR = (*(uint16_t*)pTxBuffer);
	    	Len--;
	    	Len--; //you send out 2 bytes of data thats why 2 len --
	    	(uint16_t*)pTxBuffer++;

	    }else
	    {
	    	//8bit data format
	    	//1. load the data into DR
	    	pSPIx->SPI_DR = *pTxBuffer;
	    	Len--;
            *pTxBuffer++;
	    }

	 }

 }


 /*****************************************************************
 *@fn                 - SPI_PeripheralControl
 *
 *@brief              - the functions  the SPI peripheral
 *
 *@Param[in]          - SPI peripheral base address
 *@Param[in]          -
 *
 *@Return             - none
 *
 *@Notes              - This is a Blocking call cause of while loops
 *@Notes              - interrupt based codes would not block
 *@Notes              - also this code called polling based API Function
 *
 */


 void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
 {

	 if(EnorDi == ENABLE)
	 {
		  pSPIx->SPI_CR1 |= (1 << SPI_CR1_SPE);
	 }else
	 {

		 pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SPE);
	 }

}


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{

	 if(EnorDi == ENABLE)
	 {
		  pSPIx->SPI_CR1 |= (1 << SPI_CR1_SSI);
	 }else
	 {

		 pSPIx->SPI_CR1 &= ~(1 << SPI_CR1_SSI);
	 }

}


void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{

	 if(EnorDi == ENABLE)
	 {
		  pSPIx->SPI_CR2 |= (1 << SPI_CR2_SSOE);
	 }else
	 {

		 pSPIx->SPI_CR2 &= ~(1 << SPI_CR2_SSOE);
	 }

}
